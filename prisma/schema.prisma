generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blacklist {
  userId    String   @id
  reason    String
  createdAt DateTime @default(now())
}

model LevelRole {
  id     String @id @default(uuid())
  level  Int    @unique
  roleId String
}

model XpBoost {
  id        String   @id @default(uuid())
  userId    String
  amount    Float
  expiresAt DateTime
}

model UserLevel {
  userId String @id @unique

  totalXp      Int      @default(0)
  currentXp    Int      @default(0)
  requiredXp   Int      @default(100)
  currentLevel Int      @default(0)
  xpBoost      Float    @default(0.0)
  lastXpEarned DateTime @default(now())

  levelUpMessage String?

  bgImage           String?
  bgColor           String?
  borderColor       String?
  noBorder          Boolean?
  avatarBorderColor String?
  barColor          String?
  fontColor         String?
}

model User {
  idx             Int              @default(autoincrement())
  id              String           @id @unique
  badges          String[]
  titles          Title[]
  bio             String?          @db.VarChar(512)
  factionPosition FactionPosition?
  cash            Int              @default(100)
  bank            Int              @default(500)

  items Item[]

  faction   Faction? @relation(fields: [factionId], references: [id])
  factionId Int?
}

model Faction {
  id               Int      @id @default(autoincrement())
  badges           String[] // Internally managed
  titles           Title[]
  // joinType         FactionStatus
  iconUrl          String
  name             String   @db.VarChar(32)
  description      String   @db.VarChar(512)
  ownerId          String
  pendingMemberIds String[] @default([])
  members          User[]
  tokens           Int      @default(0)
}

model Item {
  id          String  @id @default(uuid())
  name        String
  description String
  usage       String
  usable      Boolean
  type        String
  emoji       String
  sellable    Boolean
  sellPrice   Int?
  value       String
  ownerId     String?
  price       Int
  owner       User?   @relation(fields: [ownerId], references: [id])
}

enum PrismaDropRarityType {
  legendary
  mythic
  gold
  silver
  bronze
}

model Badge {
  id          String @id @unique
  name        String
  description String
  icon        String
}

enum Title {
  BETA_TESTER
  ELITE_LEVEL
}

enum FactionPosition {
  OWNER
  SENIOR
  MEMBER
}

enum FactionStatus {
  OPEN
  CLOSED
  INVITE_ONLY
}
